// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"empty",
		"class",
		"ident",
		"lparen",
		"rparen",
		"extends",
		"colon",
		"comma",
		"lbrace",
		"rbrace",
		"semicolon",
		"def",
		"if",
		"while",
		"assign",
		"return",
		"elif",
		"else",
		"period",
		"string_literal",
		"plus",
		"and",
		"int",
		"mul",
		"div",
		"true",
		"false",
		"typecase",
		"atleast",
		"atmost",
		"eq",
		"gt",
		"let",
		"lt",
		"minus",
		"not",
		"or",
		"string_escape_error",
		"unknown",
	},

	idMap: map[string]Type{
		"INVALID":             0,
		"$":                   1,
		"empty":               2,
		"class":               3,
		"ident":               4,
		"lparen":              5,
		"rparen":              6,
		"extends":             7,
		"colon":               8,
		"comma":               9,
		"lbrace":              10,
		"rbrace":              11,
		"semicolon":           12,
		"def":                 13,
		"if":                  14,
		"while":               15,
		"assign":              16,
		"return":              17,
		"elif":                18,
		"else":                19,
		"period":              20,
		"string_literal":      21,
		"plus":                22,
		"and":                 23,
		"int":                 24,
		"mul":                 25,
		"div":                 26,
		"true":                27,
		"false":               28,
		"typecase":            29,
		"atleast":             30,
		"atmost":              31,
		"eq":                  32,
		"gt":                  33,
		"let":                 34,
		"lt":                  35,
		"minus":               36,
		"not":                 37,
		"or":                  38,
		"string_escape_error": 39,
		"unknown":             40,
	},
}
