/* Lexical Parser */

!whitespace : '\t' | '\n' | '\r' | ' ' ;


_letter : 'A'-'Z' | 'a'-'z' | '_' ;
_digit : '0'-'9' ;
_alpha : _letter | _digit ;

class : 'c' 'l' 'a' 's' 's' ;
def : 'd' 'e' 'f' ;
let: 'l' 'e' 't' ;
extends : 'e' 'x' 't' 'e' 'n' 'd' 's';
if : 'i' 'f' ;
elif : 'e' 'l' 'i' 'f' ;
else : 'e' 'l' 's' 'e' ;
while : 'w' 'h' 'i' 'l' 'e' ;
return : 'r' 'e' 't' 'u' 'r' 'n' ;
typecase : 't' 'y' 'p' 'e' 'c' 'a' 's' 'e' ;
true : 't' 'r' 'u' 'e' ;
false : 'f' 'a' 'l' 's' 'e' ;
or : 'o' 'r' ;
not : 'n' 'o' 't' ;
and : 'a' 'n' 'd' ;

/* predefined identifiers */
_valid_escape : '\\' ( '0' | 'b' | 't' | 'n' | 'r' | 'f' | '"' | '\\') ;
_not_escape : 'a' | 'c' | 'd' | 'e' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l'
					| 'm' | 'o' | 'p' | 'q' | 's' | 'u' | 'v' | 'w' 
					| 'x' | 'y' | 'z' ;
string_escape_error : '"'{(_alpha | ' ')}  '\\' _not_escape {(_alpha | ' ')}  '"' ;
//string_newline_error : '"' {.} '\\' 'n' ;
string_literal : '"' {(_alpha | ' ' | '{' | '}' | '[' | ']' | '~' | ',' | '.' | ';' | ':' 
						| '^' | '!' | '@' | '#' | '$' | '%' | '&' | '*' | '(' | ')' | '-' | '?' | '<' | '>' | '|' | '=' | '/'
						| '+')} '"' ;
int : '1'-'9' {_digit} ;

ident : 'S' 't' 'r' 'i' 'n' 'g' | 'I' 'n' 't' | 'O' 'b' 'j' | 'B' 'o' 'o' 'l' 'e' 'a' 'n'
		| 'a' 'n' 'd' | 'o' 'r' | 'n' 'o' 't' 
		| 'N' 'o' 't' 'h' 'i' 'n' 'g' | 'n' 'o' 'n' 'e' | _letter {_alpha} ;

// --- [ Comments (suppressed) ] -----------------------------------------------
!comment      : _lineComment | _blockComment | _tripleQuoteComment ;
_lineComment  : '/' '/' { . } '\n' ;
_blockComment : '/' '*' { . | '*' } '*' '/' ;
_tripleQuoteComment : '"' '"' '"' { . } '"' '"' '"' ;

/* punctuation */
plus : '+' ;
minus : '-' ;
mul : '*' ;
div : '/' ;

eq : '=' '=' ;
atmost : '<' '=' ;
lt : '<' ;
atleast : '>' '=' ;
gt : '>' ;

lbrace : '{' ;
rbrace : '}' ;
assign : '=' ;
lparen : '(' ;
rparen : ')' ;
comma : ',' ;
semicolon : ';' ;
period : '.' ;
colon : ':' ;

unknown : . ; // catch unmatched tokens

/* Syntactic Parser */

<<
import (
	"github.com/Lebonesco/quack_parser/token"
	"github.com/Lebonesco/quack_parser/util"
)
>>

Program 
	: ClassSignature ClassBody Program 
	| Statement Program
	| empty
	;

ClassSignature : class ident lparen FormalArgs rparen Extend ;

Extend
	: extends ident
	| empty
	;

FormalArgs 
	: ident colon ident FormalArgsList
	| empty ;

FormalArgsList
	: comma ident colon ident FormalArgsList
	| empty
	;

ClassBody : lbrace Statement rbrace lbrace Method rbrace semicolon ;

Method : def ident FormalArgs Type StatementBlock ;

StatementBlock : lbrace Statement rbrace ;

Statement 
		: if RExpr StatementBlock IfStatement
		| while RExpr StatementBlock
		| LExpr Type assign RExpr semicolon
		| RExpr
		| return semicolon
		| Typecase
		;

OptionalReturn
	: RExpr
	| empty
	;

Type
	: colon ident
	| empty
	;

IfStatement
	: elif RExpr StatementBlock IfStatement
	| else StatementBlock
	| empty
	;

LExpr : ident
	  | RExpr period ident
	  ;

RExpr 
	  : string_literal
      | RExpr plus Term 			<< $0.(int64) + $2.(int64), nil >>
      | RExpr minus Term 			<< $0.(int64) - $2.(int64), nil >>
      | Term
      | Bool and Bool				<< $0.(bool) && $2.(bool), nil >>
      | Bool or Bool    			<< $0.(bool) || $2.(bool), nil >>
      | RExpr period ident lparen ActualArgs rparen
      | ident lparen ActualArgs rparen
      ;

Term 
	: Term mul Factor      << $0.(int64) * $2.(int64), nil >>
	| Term div Factor      << $0.(int64) / $2.(int64), nil >>
	| Factor 
	;

Factor
	: lparen RExpr rparen	<< $1, nil >>
	| int 					<< util.IntValue($0.(*token.Token).Lit) >>
	;

Bool
	: true                  << true, nil >>
	| false					<< false, nil >>
	;

ActualArgs
	: RExpr comma RExpr
	| empty 
	;

Typecase : typecase RExpr lbrace TypeAlternative rbrace ;

TypeAlternative : ident colon ident StatementBlock ;