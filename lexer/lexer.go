// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/Lebonesco/quack_parser/token"
)

const (
	NoState    = -1
	NumStates  = 132
	NumSymbols = 212
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: 'c'
1: 'l'
2: 'a'
3: 's'
4: 's'
5: 'd'
6: 'e'
7: 'f'
8: 'l'
9: 'e'
10: 't'
11: 'e'
12: 'x'
13: 't'
14: 'e'
15: 'n'
16: 'd'
17: 's'
18: 'i'
19: 'f'
20: 'e'
21: 'l'
22: 'i'
23: 'f'
24: 'e'
25: 'l'
26: 's'
27: 'e'
28: 'w'
29: 'h'
30: 'i'
31: 'l'
32: 'e'
33: 'r'
34: 'e'
35: 't'
36: 'u'
37: 'r'
38: 'n'
39: 't'
40: 'y'
41: 'p'
42: 'e'
43: 'c'
44: 'a'
45: 's'
46: 'e'
47: 't'
48: 'r'
49: 'u'
50: 'e'
51: 'f'
52: 'a'
53: 'l'
54: 's'
55: 'e'
56: 'o'
57: 'r'
58: 'n'
59: 'o'
60: 't'
61: 'a'
62: 'n'
63: 'd'
64: '"'
65: ' '
66: '\'
67: ' '
68: '"'
69: '"'
70: ' '
71: '{'
72: '}'
73: '['
74: ']'
75: '~'
76: ','
77: '.'
78: ';'
79: ':'
80: '^'
81: '!'
82: '@'
83: '#'
84: '$'
85: '%'
86: '&'
87: '*'
88: '('
89: ')'
90: '-'
91: '?'
92: '<'
93: '>'
94: '|'
95: '='
96: '/'
97: '+'
98: '"'
99: 'S'
100: 't'
101: 'r'
102: 'i'
103: 'n'
104: 'g'
105: 'I'
106: 'n'
107: 't'
108: 'O'
109: 'b'
110: 'j'
111: 'B'
112: 'o'
113: 'o'
114: 'l'
115: 'e'
116: 'a'
117: 'n'
118: 'a'
119: 'n'
120: 'd'
121: 'o'
122: 'r'
123: 'n'
124: 'o'
125: 't'
126: 'N'
127: 'o'
128: 't'
129: 'h'
130: 'i'
131: 'n'
132: 'g'
133: 'n'
134: 'o'
135: 'n'
136: 'e'
137: '+'
138: '-'
139: '*'
140: '/'
141: '='
142: '='
143: '<'
144: '='
145: '<'
146: '>'
147: '='
148: '>'
149: '{'
150: '}'
151: '='
152: '('
153: ')'
154: ','
155: ';'
156: '.'
157: ':'
158: '_'
159: '\'
160: '0'
161: 'b'
162: 't'
163: 'n'
164: 'r'
165: 'f'
166: '"'
167: '\'
168: 'a'
169: 'c'
170: 'd'
171: 'e'
172: 'g'
173: 'h'
174: 'i'
175: 'j'
176: 'k'
177: 'l'
178: 'm'
179: 'o'
180: 'p'
181: 'q'
182: 's'
183: 'u'
184: 'v'
185: 'w'
186: 'x'
187: 'y'
188: 'z'
189: '/'
190: '/'
191: '\n'
192: '/'
193: '*'
194: '*'
195: '*'
196: '/'
197: '"'
198: '"'
199: '"'
200: '"'
201: '"'
202: '"'
203: '\t'
204: '\n'
205: '\r'
206: ' '
207: '1'-'9'
208: 'A'-'Z'
209: 'a'-'z'
210: '0'-'9'
211: .
*/
