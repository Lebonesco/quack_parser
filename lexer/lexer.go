// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/Lebonesco/quack_scanner/token"
)

const (
	NoState    = -1
	NumStates  = 129
	NumSymbols = 204
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: 'c'
1: 'l'
2: 'a'
3: 's'
4: 's'
5: 'd'
6: 'e'
7: 'f'
8: 'l'
9: 'e'
10: 't'
11: 'e'
12: 'x'
13: 't'
14: 'e'
15: 'n'
16: 'd'
17: 's'
18: 'i'
19: 'f'
20: 'e'
21: 'l'
22: 'i'
23: 'f'
24: 'e'
25: 'l'
26: 's'
27: 'e'
28: 'w'
29: 'h'
30: 'i'
31: 'l'
32: 'e'
33: 'r'
34: 'e'
35: 't'
36: 'u'
37: 'r'
38: 'n'
39: 't'
40: 'y'
41: 'p'
42: 'e'
43: 'c'
44: 'a'
45: 's'
46: 'e'
47: 't'
48: 'r'
49: 'u'
50: 'e'
51: 'f'
52: 'a'
53: 'l'
54: 's'
55: 'e'
56: '"'
57: ' '
58: '\'
59: ' '
60: '"'
61: '"'
62: ' '
63: '{'
64: '}'
65: '['
66: ']'
67: '~'
68: ','
69: '.'
70: ';'
71: ':'
72: '^'
73: '!'
74: '@'
75: '#'
76: '$'
77: '%'
78: '&'
79: '*'
80: '('
81: ')'
82: '-'
83: '?'
84: '<'
85: '>'
86: '|'
87: '='
88: '/'
89: '+'
90: '"'
91: 'S'
92: 't'
93: 'r'
94: 'i'
95: 'n'
96: 'g'
97: 'I'
98: 'n'
99: 't'
100: 'O'
101: 'b'
102: 'j'
103: 'B'
104: 'o'
105: 'o'
106: 'l'
107: 'e'
108: 'a'
109: 'n'
110: 'a'
111: 'n'
112: 'd'
113: 'o'
114: 'r'
115: 'n'
116: 'o'
117: 't'
118: 'N'
119: 'o'
120: 't'
121: 'h'
122: 'i'
123: 'n'
124: 'g'
125: 'n'
126: 'o'
127: 'n'
128: 'e'
129: '+'
130: '-'
131: '*'
132: '/'
133: '='
134: '='
135: '<'
136: '='
137: '<'
138: '>'
139: '='
140: '>'
141: '{'
142: '}'
143: '='
144: '('
145: ')'
146: ','
147: ';'
148: '.'
149: ':'
150: '_'
151: '\'
152: '0'
153: 'b'
154: 't'
155: 'n'
156: 'r'
157: 'f'
158: '"'
159: '\'
160: 'a'
161: 'c'
162: 'd'
163: 'e'
164: 'g'
165: 'h'
166: 'i'
167: 'j'
168: 'k'
169: 'l'
170: 'm'
171: 'o'
172: 'p'
173: 'q'
174: 's'
175: 'u'
176: 'v'
177: 'w'
178: 'x'
179: 'y'
180: 'z'
181: '/'
182: '/'
183: '\n'
184: '/'
185: '*'
186: '*'
187: '*'
188: '/'
189: '"'
190: '"'
191: '"'
192: '"'
193: '"'
194: '"'
195: '\t'
196: '\n'
197: '\r'
198: ' '
199: '1'-'9'
200: 'A'-'Z'
201: 'a'-'z'
202: '0'-'9'
203: .
*/
