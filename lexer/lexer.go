// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/Lebonesco/quack_scanner/token"
)

const (
	NoState    = -1
	NumStates  = 129
	NumSymbols = 168
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: 'c'
1: 'l'
2: 'a'
3: 's'
4: 's'
5: 'd'
6: 'e'
7: 'f'
8: 'l'
9: 'e'
10: 't'
11: 'e'
12: 'x'
13: 't'
14: 'e'
15: 'n'
16: 'd'
17: 's'
18: 'i'
19: 'f'
20: 'e'
21: 'l'
22: 'i'
23: 'f'
24: 'e'
25: 'l'
26: 's'
27: 'e'
28: 'w'
29: 'h'
30: 'i'
31: 'l'
32: 'e'
33: 'r'
34: 'e'
35: 't'
36: 'u'
37: 'r'
38: 'n'
39: 't'
40: 'y'
41: 'p'
42: 'e'
43: 'c'
44: 'a'
45: 's'
46: 'e'
47: 't'
48: 'r'
49: 'u'
50: 'e'
51: 'f'
52: 'a'
53: 'l'
54: 's'
55: 'e'
56: '"'
57: ' '
58: '\'
59: ' '
60: '"'
61: '"'
62: ' '
63: '"'
64: 'S'
65: 't'
66: 'r'
67: 'i'
68: 'n'
69: 'g'
70: 'I'
71: 'n'
72: 't'
73: 'O'
74: 'b'
75: 'j'
76: 'B'
77: 'o'
78: 'o'
79: 'l'
80: 'e'
81: 'a'
82: 'n'
83: 'a'
84: 'n'
85: 'd'
86: 'o'
87: 'r'
88: 'n'
89: 'o'
90: 't'
91: 'N'
92: 'o'
93: 't'
94: 'h'
95: 'i'
96: 'n'
97: 'g'
98: 'n'
99: 'o'
100: 'n'
101: 'e'
102: '+'
103: '-'
104: '*'
105: '/'
106: '='
107: '='
108: '<'
109: '='
110: '<'
111: '>'
112: '='
113: '>'
114: '{'
115: '}'
116: '='
117: '('
118: ')'
119: ','
120: ';'
121: '.'
122: ':'
123: '_'
124: 'a'
125: 'c'
126: 'd'
127: 'e'
128: 'g'
129: 'h'
130: 'i'
131: 'j'
132: 'k'
133: 'l'
134: 'm'
135: 'o'
136: 'p'
137: 'q'
138: 's'
139: 'u'
140: 'v'
141: 'w'
142: 'x'
143: 'y'
144: 'z'
145: '/'
146: '/'
147: '\n'
148: '/'
149: '*'
150: '*'
151: '*'
152: '/'
153: '"'
154: '"'
155: '"'
156: '"'
157: '"'
158: '"'
159: '\t'
160: '\n'
161: '\r'
162: ' '
163: '1'-'9'
164: 'A'-'Z'
165: 'a'-'z'
166: '0'-'9'
167: .
*/
